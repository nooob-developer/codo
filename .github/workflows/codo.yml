name: Build and Release Godot Linux

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Export Godot Project
        uses: firebelley/godot-export@v7.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_export_templates.tpz
          relative_project_path: ./
          relative_export_path: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install linuxdeploy
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy-plugin-appimage-x86_64.AppImage

      - name: Prepare build outputs
        run: |
          mkdir -p build/releases
          cp build/Codo/Codo.x86_64 build/releases/Codo.x86_64
          chmod +x build/releases/Codo.x86_64
          cp build/Codo/Codo.x86_64 build/releases/codo
          chmod +x build/releases/codo
          if [ -f "addons/gdterm/bin/libgdterm.linux.template_release.x86_64.so" ]; then
            cp addons/gdterm/bin/libgdterm.linux.template_release.x86_64.so build/releases/
            echo "Found gdterm library at addons/gdterm/bin/"
          else
            echo "Warning: libgdterm.so not found. Checking other possible locations..."
            find . -name "*libgdterm*" -type f
          fi

      - name: Prepare AppDir structure
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/lib AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          mkdir -p AppDir/usr/share/icons/hicolor/512x512/apps

          cp build/Codo/Codo.x86_64 AppDir/usr/bin/
          chmod +x AppDir/usr/bin/Codo.x86_64

          if [ -f "addons/gdterm/bin/libgdterm.linux.template_release.x86_64.so" ]; then
            cp addons/gdterm/bin/libgdterm.linux.template_release.x86_64.so AppDir/usr/lib/
          fi

          cp packaging/codo.desktop AppDir/usr/share/applications/
          cp packaging/codo-icon.png AppDir/usr/share/icons/hicolor/256x256/apps/
          cp packaging/codo-icon.png AppDir/usr/share/icons/hicolor/512x512/apps/

          cat > AppDir/AppRun <<'EOF'
#!/bin/bash
USER_PWD="$PWD"
export LD_LIBRARY_PATH="$APPDIR/usr/lib:$LD_LIBRARY_PATH"
cd "$USER_PWD"
exec "$APPDIR/usr/bin/Codo.x86_64" "$@"
EOF
          chmod +x AppDir/AppRun
          cp AppDir/usr/share/applications/codo.desktop AppDir/
          cp packaging/codo-icon.png AppDir/

      - name: Verify AppDir structure
        run: |
          find AppDir -type f -exec ls -la {} \;
          cat AppDir/codo.desktop
          head -20 AppDir/AppRun

      - name: Build AppImage
        run: |
          export OUTPUT="Codo-x86_64.AppImage"
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin appimage --output appimage -v 0
          APPIMAGE_FILE=""
          if [ -f "Codo-x86_64.AppImage" ]; then
            APPIMAGE_FILE="Codo-x86_64.AppImage"
          elif [ -f "Codo.AppImage" ]; then
            APPIMAGE_FILE="Codo.AppImage"
          elif ls *.AppImage 1> /dev/null 2>&1; then
            APPIMAGE_FILE=$(ls *.AppImage | head -1)
          fi
          if [ -n "$APPIMAGE_FILE" ]; then
            chmod +x "$APPIMAGE_FILE"
            mkdir -p build/releases
            mv "$APPIMAGE_FILE" build/releases/Codo.AppImage
          else
            echo "❌ ERROR: No AppImage file found after build!"
            exit 1
          fi

      - name: Create Uncompressed Portable Version
        run: |
          mkdir -p build/releases/Codo-Portable-Linux
          cp -r AppDir/* build/releases/Codo-Portable-Linux/
          cat > build/releases/Codo-Portable-Linux/run.sh <<'EOF'
#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export LD_LIBRARY_PATH="$DIR/usr/lib:$LD_LIBRARY_PATH"
cd "$PWD"
exec "$DIR/usr/bin/Codo.x86_64" "$@"
EOF
          chmod +x build/releases/Codo-Portable-Linux/run.sh
          chmod +x build/releases/Codo-Portable-Linux/usr/bin/Codo.x86_64
          cat > build/releases/Codo-Portable-Linux/install.sh <<'EOF'
#!/bin/bash
sudo cp usr/bin/Codo.x86_64 /usr/local/bin/codo
sudo chmod +x /usr/local/bin/codo
sudo cp usr/lib/*.so /usr/local/lib/ 2>/dev/null || true
sudo cp codo.desktop /usr/share/applications/
sudo cp -r usr/share/icons/* /usr/share/icons/
sudo update-desktop-database 2>/dev/null || true
EOF
          chmod +x build/releases/Codo-Portable-Linux/install.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Codo-AppImage
          path: build/releases/Codo.AppImage
          compression-level: 0

      - uses: actions/upload-artifact@v4
        with:
          name: Codo-x86_64-Binary
          path: build/releases/Codo.x86_64
          compression-level: 0

      - uses: actions/upload-artifact@v4
        with:
          name: Codo-Bundled-Binary
          path: |
            build/releases/codo
            build/releases/codo-wrapper
            build/releases/libgdterm.linux.template_release.x86_64.so
          compression-level: 0

      - uses: actions/upload-artifact@v4
        with:
          name: Codo-Portable-Linux
          path: build/releases/Codo-Portable-Linux/
          compression-level: 0

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts/ -type f -exec cp {} release-files/ \;
          chmod +x release-files/Codo.AppImage 2>/dev/null || true
          chmod +x release-files/Codo.x86_64 2>/dev/null || true
          chmod +x release-files/codo 2>/dev/null || true
          chmod +x release-files/codo-wrapper 2>/dev/null || true
          cat > release-files/README.md <<'EOF'
# Codo - Code Editor Release Files
ls -la release-files/
echo "Release files prepared successfully"
EOF

      - name: Create tarball for portable version
        run: |
          if [ -d artifacts/Codo-Portable-Linux ]; then
            cd artifacts/Codo-Portable-Linux/
            tar -czf ../../release-files/Codo-Portable-Linux.tar.gz .
            cd ../../
          fi

      - id: tagger
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: main

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.new_tag }}
          name: "Codo Release ${{ steps.tagger.outputs.new_tag }}"
          body_path: ./release-files/README.md
          files: |
            release-files/Codo.AppImage
            release-files/Codo.x86_64
            release-files/codo
            release-files/codo-wrapper
            release-files/libgdterm.linux.template_release.x86_64.so
            release-files/Codo-Portable-Linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
