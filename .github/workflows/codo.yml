name: Build and Release Godot Linux AppImage

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Export Godot Project
        uses: firebelley/godot-export@v7.0.0
        with: 
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_export_templates.tpz
          relative_project_path: ./
          relative_export_path: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install linuxdeploy
        run: |
          # Download linuxdeploy
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          
          # Download linuxdeploy appimage plugin
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy-plugin-appimage-x86_64.AppImage
          
          # Make them available in PATH
          mkdir -p ~/bin
          cp linuxdeploy-x86_64.AppImage ~/bin/linuxdeploy
          cp linuxdeploy-plugin-appimage-x86_64.AppImage ~/bin/linuxdeploy-plugin-appimage
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Prepare AppDir structure
        run: |
          # Create the AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy the Godot executable
          cp build/Codo/Codo.x86_64 AppDir/usr/bin/
          chmod +x AppDir/usr/bin/Codo.x86_64
          
          # Copy the required library (you'll need to ensure this file exists)
          # If this file is in your repository, adjust the path accordingly
          # For now, creating a placeholder - replace with actual file location
          if [ -f "addons/gdterm/bin/libgdterm.linux.template_release.x86_64.so" ]; then
            cp addons/gdterm/bin/libgdterm.linux.template_release.x86_64.so AppDir/usr/lib/
          else
            echo "Warning: libgdterm.so not found. Please ensure it's available in your repository."
          fi
          
          # Copy desktop file and icon
          cp packaging/codo.desktop AppDir/usr/share/applications/
          cp packaging/codo-icon.png AppDir/usr/share/icons/hicolor/256x256/apps/
          
          # Create AppRun launcher script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/sh
          # Set up library path to include our custom libraries
          export LD_LIBRARY_PATH="$APPDIR/usr/lib:$LD_LIBRARY_PATH"
          
          # Change to the AppImage mount point
          cd "$APPDIR"
          
          # Execute the main application
          exec "$APPDIR/usr/bin/Codo.x86_64" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Copy desktop file and icon to root of AppDir (required by AppImage spec)
          cp packaging/codo.desktop AppDir/
          cp packaging/codo-icon.png AppDir/

      - name: Verify AppDir structure
        run: |
          echo "AppDir structure:"
          find AppDir -type f -exec ls -la {} \;

      - name: Build AppImage with linuxdeploy
        run: |
          # Create output directory
          mkdir -p build
          
          # Use linuxdeploy to create the AppImage
          linuxdeploy --appdir AppDir --output appimage
          
          # Move the resulting AppImage to build directory with proper name
          mv Codo*.AppImage build/Codo.AppImage

      - name: Verify AppImage creation
        run: |
          ls -la build/
          if [ -f "build/Codo.AppImage" ]; then
            echo "AppImage created successfully"
            chmod +x build/Codo.AppImage
            file build/Codo.AppImage
          else
            echo "ERROR: AppImage not found"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Codo-AppImage
          path: build/Codo.AppImage

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Codo-AppImage
          path: .

      - name: Bump version and push tag
        id: tagger
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.new_tag }}
          name: "Release ${{ steps.tagger.outputs.new_tag }}"
          files: |
            Codo.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
